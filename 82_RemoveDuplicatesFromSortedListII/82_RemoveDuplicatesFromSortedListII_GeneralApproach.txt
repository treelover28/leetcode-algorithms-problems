/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) 
    {
        // this approach will remove duplicates from both sorted list and unsorted list
        
        if (head == null) return head; // return trivial empty list
        
        HashMap<Integer, Integer> map = new HashMap<>();
        ListNode curr = head;
        while(curr!= null)
        {
            // count appearance
            map.put(curr.val, map.getOrDefault(curr.val, 0) + 1); 
            curr = curr.next;
        }
        curr = head; // restart from head
        List<ListNode> list = new LinkedList<>();
        
        while (curr != null)
        {
            if (map.get(curr.val) < 2) list.add(curr); // only add distinct node
            curr = curr.next;
        }
        if (list.size() == 0) return curr; 
        // list'size == 0 occurs when input contains all duplicates like [1,1,1,1,1]
        // return curr which at this point is a null node. 
        
        for (int i = 0; i < list.size() - 1; i++) // connect distinct nodes
        {
            list.get(i).next = list.get(i+1);
        }
        list.get(list.size() - 1).next = null;
        head = list.get(0);
      
        return head; 
    }
}