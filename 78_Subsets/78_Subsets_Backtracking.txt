class Solution {
    public List<List<Integer>> subsets(int[] nums) 
    {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(nums, res, new ArrayList<>(), 0);
        return res;
    }
    
    private void backtrack(int[] nums, List<List<Integer>> res, List<Integer> temp, int start)
    {
        res.add(new ArrayList<>(temp)); // add new combination to result
        for (int i = start; i < nums.length; i++)
        {
            temp.add(nums[i]); // add current number to temp
            backtrack(nums, res, temp, i+1); // move index up,so it add next number
            //once the start index exceeds the nums.length, recursion starts to unwind
            // remove last number once it exceeds the last number in nums
            temp.remove(temp.size() - 1);
        }
    }
}