class Solution {
    public String frequencySort(String s) 
    {
        // O(n) solution
        if (s.length() < 3)
        {
            return s;
        }
        HashMap<Character,Integer> charFreq = new HashMap<>();
        for (int i = 0; i < s.length(); i++) // initialize hashmap with character's frequency
        {
            char c = s.charAt(i);
            charFreq.put(c, charFreq.getOrDefault(c,0) + 1);
            
        }
        StringBuilder res = new StringBuilder();
        ArrayList<Character>[] list = new ArrayList[s.length() + 1];
        
        for (char c : charFreq.keySet())
        {
            Integer count = charFreq.get(c);
            if (list[count] == null)
            {
                list[count] = new ArrayList<>(); // use character's frequency as its index in the list
            }
            list[count].add(c); // use arraylist to store the character so 
        }
        
        for (int i = list.length - 1; i >= 1; i--) // iterate from position of highest frequency to lowest frequency
            // i >= 1 because there wouldn't make sense to have frequency of 0
        {
            if (list[i] != null)
            {
               for (char character : list[i])
               {
                   for (int j = 0; j < i; j++) // print i times where i, the index, is also the frequency of the letter
                   {
                       res.append(character);
                   }
               }
            }
        }
        return res.toString();
    }
}