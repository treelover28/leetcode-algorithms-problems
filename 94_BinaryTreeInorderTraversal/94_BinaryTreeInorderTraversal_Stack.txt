/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) 
    {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode node = root;
        
        while (node != null || !stack.empty())
        {
            while (node != null)
            {
                stack.push(node); 
		// keep pushing left subtree to stack... aka traversing left until we reach a null node
                node = node.left;
            }
            // if we reach a null node, we return to its parent
            // or a root node on the stack whose subtree we haven't fully explore yet
            node = stack.pop();
            res.add(node.val);
            node = node.right; // traverse to right subtree
            // if null, it would end back at the stack.pop() to explore another node anyway.
        }
        return res;
    }
}