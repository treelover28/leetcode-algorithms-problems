
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution 
{
    public List<List<Integer>> pathSum(TreeNode root, int sum)
    {
        List<List<Integer>> list = new ArrayList<>();
        pathSumHelper(root, sum, list);
        return list;
    }
    
    // global variables
    int pathSum = 0; 
    List<Integer> l = new ArrayList<>();

    private void pathSumHelper(TreeNode root, int sum, List<List<Integer>> list)
    {
        if (root != null)
        {
            pathSum += root.val;
            l.add(root.val);
        
            if (root.left == null && root.right == null && pathSum == sum)
            {
		// add deep copy to list so it doesn't get changed as recursion unwinds
                list.add(new ArrayList<>(l));  
            }
            
            if (root.left != null) 
            {
                pathSumHelper(root.left, sum, list); // traverse left subtree
                // when unwinding up, subtract value from sum and l
                // so new value from a different path can be added in.
                pathSum -= root.left.val; 
                l.remove(l.size() - 1);
            }
            
            if (root.right != null)
            {
                pathSumHelper(root.right, sum, list); // traverse right subtree
                // when unwinding up, subtract value from sum and l
                // so new value from a different path can be added in.
                pathSum -= root.right.val;
                l.remove(l.size() - 1);
            }
        }
        else
        {
            return;
        }
    }
}
