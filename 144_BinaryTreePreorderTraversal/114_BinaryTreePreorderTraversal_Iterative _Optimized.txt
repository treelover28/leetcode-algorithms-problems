/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) 
    {
	// Optimized O(n) solution using Stack
        List<Integer> res = new LinkedList<>();
        if (root == null) return res;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        stack.push(curr);
        
        while (!stack.empty())
        {
            if (curr != null)
            {
                res.add(curr.val); 
                if (curr.right != null)
                {
                    stack.push(curr.right); // push right child to stack to be visited by us later
                }
                curr = curr.left; // visit left child
                // if left child exist, the next iteration of the while loop will add its value to res
            }
            else // if left child == null, we pop the right child out for us to visit
            {
                curr = stack.pop();
            }
        }
        return res;
    }
}