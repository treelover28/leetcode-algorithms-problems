class Solution {
   public String longestPalindrome(String s) {
        String res = "";
        int length = 0;

	// use a boolean 3D array to check the index combination between i and j thats results in a palindrome
        boolean[][] isPalindrome = new boolean[s.length()][s.length()];
        
	for (int i = s.length() - 1; i >= 0; i--) 
        {
            for (int j = i; j < s.length(); j++) 
            {
                // if charAt(i) == charAt(j) AND
                // (either there is only one character between i and j OR its inner component is also already found to be a palindrome)
                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalindrome[i + 1][j - 1])) 
                {
                    isPalindrome[i][j] = true; 
                    // we set the spot [i][j] on 2-D boolean array as True 
                    // indicating the substring between i and j inclusive is a palindrome.
                    
                    if (j - i + 1 > length) // if the distance between i and j  is greater than previous known length 
                    { 
                        //this is longest palindromic substring found so far
                        res = s.substring(i, j + 1); 
                        length = j - i + 1;
                    }
                }
            }
        }
        return res;
    }
}