class Solution {
    public int lengthOfLongestSubstring(String s) 
    {
        int length = s.length();
        if (length < 2)
        {
            return length;
        }
        
        int max = 0;
        Set<Character> charSet = new HashSet<>();
        for (int i = 0, j = 0; i < length; i++)
        {
            if (!charSet.contains(s.charAt(i)))
            {
                charSet.add(s.charAt(i));
                max = Math.max(max, charSet.size());
                continue;
            }
            // if c is already in charSet
            charSet.remove(s.charAt(j++)); // keep removing characters from the set until the repeated character is removed
            // then the if-statement can finally run again
            i--; // recount starting at the repeating character
        }
        return max;
    }
}